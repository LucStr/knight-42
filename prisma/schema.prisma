// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  password        String?
  name            String
  resetToken      String?          @unique
  updatedAt       DateTime         @updatedAt
  createdAt       DateTime         @default(now())
  assets          Asset[]
  alerts          Alert[]
  responseActions ResponseAction[]
  attackChains    AttackChain[]
}

enum AssetType {
  HOST // Servers, workstations, proxies, etc.
  USER // Individual accounts or groups
}

enum AssetCriticality {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AssetVisibility {
  NONE
  ALERTS
  FULL
}

model Asset {
  id                   String           @id @default(cuid())
  name                 String
  identifier           String           @unique
  visibility           AssetVisibility  @default(NONE)
  metadata             Json?
  criticality          AssetCriticality @default(LOW)
  type                 AssetType        @default(HOST)
  assignedTeamMemberId String?
  assignedTeamMember   User?            @relation(fields: [assignedTeamMemberId], references: [id])
  notes                String? // Optional

  alerts          Alert[]          @relation("AssetAlerts")
  responseActions ResponseAction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AlertType {
  ALERT
  INCIDENT
  HARMLESS
}

enum DetectionSource {
  VELOCIRAPTOR
  WAZUH
  OTHER
}

model AlertCategory {
  id     String  @id @default(cuid())
  name   String  @unique
  alerts Alert[]
}

enum AlertStatus {
  INITIAL_INVESTIGATION
  ESCALATED
  RESOLVED
}

model Alert {
  id                     String           @id @default(cuid())
  name                   String
  description            String           @default("")
  type                   AlertType // Alert or Incident
  startDateTime          DateTime         @default(now())
  endDateTime            DateTime?
  assets                 Asset[]          @relation("AssetAlerts")
  detectionSource        DetectionSource
  categoryId             String
  category               AlertCategory    @relation(fields: [categoryId], references: [id])
  status                 AlertStatus
  relatedIOCs            IOC[]            @relation("AlertIOCs")
  attackChainId          String?
  attackChain            AttackChain?     @relation(fields: [attackChainId], references: [id])
  responseActions        ResponseAction[]
  assignedInvestigatorId String?
  assignedInvestigator   User?            @relation(fields: [assignedInvestigatorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IOCType {
  id   String @id @default(cuid())
  name String @unique
  iocs IOC[]
}

model IOC {
  id                String           @id @default(cuid())
  typeId            String
  type              IOCType          @relation(fields: [typeId], references: [id])
  value             String
  dateFirstObserved DateTime         @default(now())
  linkedAlerts      Alert[]          @relation("AlertIOCs")
  notes             String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  responseActions   ResponseAction[]
}

model AttackChain {
  id                   String       @id @default(cuid())
  name                 String
  relatedThreatActorId String?
  relatedThreatActor   ThreatActor? @relation(fields: [relatedThreatActorId], references: [id])
  analystId            String
  analyst              User         @relation(fields: [analystId], references: [id])
  alerts               Alert[]
  notes                String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
}

model ThreatActor {
  id                 String        @id @default(cuid())
  name               String
  type               String // APT, Cybercriminal, Insider, etc.
  linkedAttackChains AttackChain[]
  notes              String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

enum ResponseActionType {
  BLOCK
  MONITORING
  OTHER
}

enum ResponseActionStatus {
  OUTSTANDING
  PENDING
  COMPLETED
  CANCELLED
}

model ResponseAction {
  id                   String               @id @default(cuid())
  name                 String
  actionType           ResponseActionType
  status               ResponseActionStatus @default(OUTSTANDING)
  dateTime             DateTime             @default(now())
  relatedIncidentId    String?
  relatedIncident      Alert?               @relation(fields: [relatedIncidentId], references: [id])
  affectedAssetId      String?
  affectedAsset        Asset?               @relation(fields: [affectedAssetId], references: [id])
  relatedIOCId         String?
  relatedIOC           IOC?                 @relation(fields: [relatedIOCId], references: [id])
  description          String               @default("")
  assignedTeamMemberId String?
  assignedTeamMember   User?                @relation(fields: [assignedTeamMemberId], references: [id])
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
}
